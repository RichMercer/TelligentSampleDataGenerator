<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="$(TargetDir)Telligent.Evolution.Rest.dll" #>
<#@ assembly name="$(TargetDir)RestApiExtractor.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="RestApiExtractor" #>
<#@ output extension=".ps1" #>
#Requires -Version 3.0
Set-StrictMode -Version 2
\<#
	This code was generated by a tool

	Changes to this file may cause incorrect behavior and will be lost if
	the code is regenerated.
\#>

<#
var apiEndpoint = new Uri("http://pstest3.local/api.ashx/v2/info/endpoints.xml");
string username = "admin";
string apiKey = "abc123";

var apiExtractor = new ApiExtractor(apiEndpoint, username, apiKey);

var endpoints = apiExtractor.GetEndpoints();
endpoints = apiExtractor.ReduceEndpoints(endpoints);

var powershellMetaData = new PowershellMetadataGenerator().GetPowershellFunctionMetaData(endpoints).OrderBy(x => x.ToString()).ToList();

foreach (var function in powershellMetaData)
{
#>
function <#= function.Name #> {
	<# if (function.PageableParametersSets.Any())  {#>[CmdletBinding(SupportsShouldProcess = $true, SupportsPaging = $true)] <# } else { #>[CmdletBinding(SupportsShouldProcess = $true)] <# } #>

	param(
<# 
foreach (var param in function.Parameters) {
	foreach (var requiredParamSets in param.RequiredParameterSets.Distinct()) { #>
		[Parameter(ParameterSetName='<#= requiredParamSets #>', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
	<# }
	foreach (var optionalParamSets in param.OptionalParameterSets.Distinct())
	{ #>
		[Parameter(ParameterSetName='<#= optionalParamSets #>', Mandatory=$false, ValueFromPipelineByPropertyName=$true)]
	<# } #>
	[<#= param.Type #>]$<#= param.Name #>,
<# } #>

		[parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
		[ValidateNotNullOrEmpty()]
		[CommunityCredential]$Credential,
		[string]$Impersonate
	) 
	process {
		$restParams = @{}
	<# foreach (var param in function.Parameters) {#>
		<# //Using PSBoundParameters so we can differentiate between no value being passed, and a null value being passed. #>

		if($PSBoundParameters.ContainsKey('<#=param.Name#>')) {
			$restParams['<#=param.Name#>'] = $<#=param.Name#>
		}
	<# } #>

		switch($PSCmdlet.ParameterSetName){
		<# foreach (var paramSet in function.ParameterSets) {#>
	'<#= paramSet.Name #>' {
				$endpoint= "<#= paramSet.Endpoint #>"
				$method = '<#= paramSet.HttpMethod #>'
				$pageable = $<#= paramSet.SupportsPaging #>
		<# foreach(var param in paramSet.UrlParameters) { #>
		$restParams.Remove('<#= param #>')
		<# } #>
	}
		<# } #>
}

		if($pageable) {
			$pagingSplat = @{}
			if($PSBoundParameters.ContainsKey('First')) {
				$pagingSplat['First'] = $PSCmdlet.PagingParameters.First
			}
			if($PSBoundParameters.ContainsKey('Skip')) {
				$pagingSplat['Skip'] = $PSCmdlet.PagingParameters.Skip
			}
			if($PSBoundParameters.ContainsKey('IncludeTotalCount')) {
				$pagingSplat['IncludeTotalCount'] = $PSCmdlet.PagingParameters.IncludeTotalCount
			}

			Invoke-CommunityRestPagedRequest  `
				-Endpoint $endpoint `
				-Method $method `
				-Parameter $restParams `
				-Credential $Credential	`
				-Impersonate $Impersonate `
				@pagingSplat
		}
		else {
			Invoke-CommunityRestRequest  `
				-Endpoint $endpoint `
				-Method $method `
				-Parameter $restParams `
				-Credential $Credential `
				-Impersonate $Impersonate
		}
	}
}

<#
}
#>

Export-ModuleMember -Function  <#= String.Join(", ", powershellMetaData.Select(x => x.Name)) #>